<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="strip_pkcs1_2_padding.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compat_strlcpy.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libopensc/log.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libopensc/padding.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"torture.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmocka.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_long_output_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>result_msg</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>result_msg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_short_output_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>SC_ERROR_WRONG_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_short_message_correct_padding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>result_msg</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>result_msg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_missing_first_zero</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>SC_ERROR_WRONG_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_missing_two</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>SC_ERROR_WRONG_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_short_padding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>SC_ERROR_WRONG_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_missing_second_zero</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'g'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>SC_ERROR_WRONG_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_missing_message</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>SC_ERROR_WRONG_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_one_byte_message</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x08</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="char">'m'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>result_msg</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'m'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>result_msg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_longer_padding</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>,
			<expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x0a</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>result_msg</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x0a</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_memory_equal</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>result_msg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>torture_empty_message</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_len</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x02</literal></expr>,
			<expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x11</literal></expr>,
			<expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_len</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>out_len</name></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>sc_pkcs1_strip_02_padding_constant_time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_len</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>out_len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert_int_equal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CMUnitTest</name></name></type> <name><name>tests</name><index>[]</index></name> <init>= <expr><block>{
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_long_output_buffer</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_short_output_buffer</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_short_message_correct_padding</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_missing_first_zero</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_missing_two</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_short_padding</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_missing_second_zero</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_missing_message</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_one_byte_message</name></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>cmocka_unit_test</name><argument_list>(<argument><expr><name>torture_longer_padding</name></expr></argument>)</argument_list></call></expr>,
			<macro><name>cmocka_unit_test</name><argument_list>(<argument>torture_empty_message</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>cmocka_run_group_tests</name><argument_list>(<argument><expr><name>tests</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
